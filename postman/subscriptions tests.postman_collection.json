{
	"info": {
		"_postman_id": "94d3d803-d5e3-46f7-929f-c233959e37db",
		"name": "Subscriptions tests",
		"description": "Pruebas completas del módulo de subscriptions siguiendo el patrón establecido",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38815455"
	},
	"item": [
		{
			"name": "1. Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Access token is received and saved to environment\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.accessToken).to.exist;",
							"    pm.expect(responseData.accessToken).to.be.a('string');",
							"    pm.environment.set(\"accessToken\", responseData.accessToken);",
							"    console.log(\"Access Token guardado exitosamente!\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"admin@test.com\",\n  \"password\": \"admin123\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "2. Register Test User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Registration successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has access token and user ID\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('accessToken');",
							"    pm.expect(jsonData.user).to.have.property('id');",
							"    ",
							"    pm.environment.set(\"testUserId\", jsonData.user.id);",
							"    console.log(\"Test User ID guardado:\", jsonData.user.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"email\": \"usertest@test.com\",\n  \"password\": \"test123\",\n  \"full_name\": \"Test User Subscription\",\n  \"age\": 25,\n  \"phone\": \"+1234567890\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/auth/register",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "3. Create Test Membership",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Membership created successfully\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Membership ID saved to environment\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.environment.set(\"membershipId\", jsonData.id);",
							"    console.log(\"Membership ID guardado:\", jsonData.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Test Premium Membership\",\n  \"cost\": 50000,\n  \"max_classes_assistance\": 8,\n  \"max_gym_assistance\": 20,\n  \"duration_months\": 1,\n  \"status\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/memberships",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"memberships"
					]
				}
			},
			"response": []
		},
		{
			"name": "4. Create Subscription",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Subscription created successfully\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Subscription structure is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.expect(jsonData).to.have.property('user_id');",
							"    pm.expect(jsonData).to.have.property('memberships');",
							"    pm.expect(jsonData.memberships).to.be.an('array').that.is.empty;",
							"    ",
							"    pm.environment.set(\"subscriptionId\", jsonData.id);",
							"    console.log(\"Subscription ID guardado:\", jsonData.id);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"userId\": \"{{testUserId}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/subscriptions",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"subscriptions"
					]
				}
			},
			"response": []
		},
		{
			"name": "5. Get Subscription (Empty)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Subscription found and is initially empty\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.user_id.id).to.eql(pm.environment.get(\"testUserId\"));",
							"    pm.expect(responseData.memberships).to.be.an('array').with.lengthOf(0);",
							"    ",
							"    console.log(\"Subscription encontrada. Memberships iniciales:\", responseData.memberships.length);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/subscriptions/users/{{testUserId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"subscriptions",
						"users",
						"{{testUserId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "6. Add Membership to Subscription",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Membership added successfully\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Subscription now contains the membership\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('memberships');",
							"    pm.expect(jsonData.memberships).to.be.an('array').with.lengthOf(1);",
							"    ",
							"    const membership = jsonData.memberships[0];",
							"    pm.expect(membership).to.have.property('membership_id');",
							"    pm.expect(membership).to.have.property('name');",
							"    pm.expect(membership).to.have.property('cost');",
							"    pm.expect(membership).to.have.property('purchase_date');",
							"    ",
							"    console.log(\"Membership agregada:\", membership.name);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"membershipId\": \"{{membershipId}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/subscriptions/{{subscriptionId}}/add-membership",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"subscriptions",
						"{{subscriptionId}}",
						"add-membership"
					]
				}
			},
			"response": []
		},
		{
			"name": "7. Verify Subscription with Membership",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 OK\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Subscription contains membership history\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.memberships).to.be.an('array').with.lengthOf(1);",
							"    ",
							"    const membership = responseData.memberships[0];",
							"    pm.expect(membership.membership_id).to.eql(pm.environment.get(\"membershipId\"));",
							"    pm.expect(membership.name).to.eql(\"Test Premium Membership\");",
							"    pm.expect(membership.cost).to.eql(50000);",
							"    ",
							"    console.log(\"Historial verificado. Memberships:\", responseData.memberships.length);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/subscriptions/users/{{testUserId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"subscriptions",
						"users",
						"{{testUserId}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}