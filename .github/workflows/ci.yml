name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, test ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        bun-version: ['latest']
      fail-fast: false

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: workshop_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ping: 1})' --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js (for Jest compatibility)
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Bun ${{ matrix.bun-version }}
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ matrix.bun-version }}

    - name: Install dependencies with Bun
      run: bun install

    - name: Generate package-lock for Jest compatibility
      run: npm install --package-lock-only

    - name: Install npm dependencies for Jest
      run: npm ci

    - name: Create test environment file
      run: |
        echo "NODE_ENV=test" > .env
        echo "MONGO_URI=mongodb://testuser:testpass@localhost:27017/workshop_test?authSource=admin" >> .env
        echo "JWT_SECRET=test-jwt-secret-key" >> .env
        echo "JWT_EXPIRES_IN=1h" >> .env

    - name: Wait for MongoDB
      run: |
        echo "Waiting for MongoDB to be ready..."
        timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        echo "MongoDB is ready!"
        sleep 5

    - name: Run linting
      run: bun run lint
      continue-on-error: false

    - name: Run type checking
      run: bun run typecheck
      continue-on-error: false

    - name: Run tests with coverage
      run: npm run ci:test
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://testuser:testpass@localhost:27017/workshop_test?authSource=admin
        JWT_SECRET: test-jwt-secret-key
        JWT_EXPIRES_IN: 1h

    - name: Check coverage threshold
      run: |
        if [ -f coverage/lcov.info ]; then
          echo " Coverage report generated successfully"
        else
          echo " Coverage report not found"
          exit 1
        fi

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Build application
      run: bun run build

  lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: 'latest'

    - name: Cache Bun dependencies
      uses: actions/cache@v4
      with:
        path: ~/.bun/install/cache
        key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
        restore-keys: |
          ${{ runner.os }}-bun-

    - name: Install dependencies
      run: bun install

    - name: Run ESLint
      run: bun run lint

    - name: Run TypeScript check
      run: bun run typecheck

  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: 'latest'

    - name: Install dependencies
      run: bun install

    - name: Generate package-lock.json for security audit
      run: npm install --package-lock-only

    - name: Run security audit
      run: npm audit --audit-level=moderate
      continue-on-error: true

    - name: Check for outdated packages
      run: npm outdated
      continue-on-error: true

    - name: Run Bun security check (if available)
      run: |
        if bun --help | grep -q "audit"; then
          bun audit
        else
          echo "Bun audit not available, using npm audit instead"
        fi
      continue-on-error: true