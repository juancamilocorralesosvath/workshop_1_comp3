name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        bun-version: ['1.0.0', 'latest']  # Puedes ajustar según tus necesidades

    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
          MONGO_INITDB_DATABASE: workshop_test
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Bun ${{ matrix.bun-version }}
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ matrix.bun-version }}

    - name: Install dependencies
      run: bun install --ci

    - name: Create test environment file
      run: |
        cp .env.test .env
        echo "MONGO_URI=mongodb://testuser:testpass@localhost:27017/workshop_test?authSource=admin" >> .env

    - name: Wait for MongoDB
      run: |
        timeout 30 bash -c 'until mongosh --host localhost:27017 --username testuser --password testpass --authenticationDatabase admin --eval "db.runCommand({ping: 1})"; do sleep 1; done'

    - name: Run linting
      run: bun run lint
      continue-on-error: true

    - name: Run type checking
      run: bun run typecheck
      continue-on-error: true

    - name: Run unit tests
      run: bun run test:unit
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://testuser:testpass@localhost:27017/workshop_test?authSource=admin
        JWT_SECRET: test-jwt-secret-key
        JWT_EXPIRES_IN: 1h

    - name: Run integration tests
      run: bun run test:integration
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://testuser:testpass@localhost:27017/workshop_test?authSource=admin
        JWT_SECRET: test-jwt-secret-key
        JWT_EXPIRES_IN: 1h

    - name: Run all tests with coverage
      run: bun run test:coverage
      env:
        NODE_ENV: test
        MONGO_URI: mongodb://testuser:testpass@localhost:27017/workshop_test?authSource=admin
        JWT_SECRET: test-jwt-secret-key
        JWT_EXPIRES_IN: 1h

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Build application
      run: bun run build

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: 'latest'

    - name: Install dependencies
      run: bun install --ci

    - name: Run ESLint
      run: bun run lint
      continue-on-error: true

    - name: Run TypeScript check
      run: bun run typecheck
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: 'latest'

    - name: Install dependencies
      run: bun install --ci

    - name: Run security audit
      # Bun no tiene un `bun audit` nativo aún (a mayo 2024), así que usamos npm como fallback
      run: |
        npm ci --package-lock-only
        npm audit --audit-level=moderate
      continue-on-error: true

    - name: Check for outdated packages
      run: |
        npm ci --package-lock-only
        npm outdated
      continue-on-error: true