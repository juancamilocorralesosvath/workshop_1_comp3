{
	"info": {
		"_postman_id": "auth-authorization-tests",
		"name": "Authentication & Authorization Tests",
		"description": "Complete test suite for role-based authentication and authorization from empty database",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üîß Setup & Database Preparation",
			"item": [
				{
					"name": "Setup Instructions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/health",
							"protocol": "http",
							"host": ["localhost"],
							"port": "3000",
							"path": ["health"]
						}
					},
					"response": []
				}
			],
			"description": "Initial setup steps and database preparation"
		},
		{
			"name": "üë• 1. User Registration (Manual Admin Setup Required)",
			"item": [
				{
					"name": "‚ö†Ô∏è Setup Instructions",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"protocol": "http",
							"host": ["localhost"],
							"port": "3000",
							"path": ["health"]
						},
						"description": "MANUAL STEP: Create admin user in database first:\n\n1. Register any user via /auth/register\n2. Manually update their role to 'admin' in the database\n3. Or use this user's credentials to login as admin\n\nDefault admin credentials for testing:\n- Email: admin@test.com\n- Password: admin123\n\nIf user doesn't exist, register first, then manually update role in DB."
					}
				},
				{
					"name": "Register Base Users (All get 'cliente' role initially)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Registration successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"testuser@test.com\",\n  \"password\": \"test123\",\n  \"full_name\": \"Test User\",\n  \"age\": 25,\n  \"phone\": \"+1234567890\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					}
				}
			],
			"description": "Register users for each role to test authorization"
		},
		{
			"name": "üîê 2. Authentication Tests",
			"item": [
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.globals.set('admin_token', jsonData.accessToken);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@test.com\",\n  \"password\": \"admin123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "Login Recepcionista",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Recepcionista login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.globals.set('recepcionista_token', jsonData.accessToken);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"recepcionista@test.com\",\n  \"password\": \"recep123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "Login Coach",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Coach login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.globals.set('coach_token', jsonData.accessToken);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"coach@test.com\",\n  \"password\": \"coach123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					}
				},
				{
					"name": "Login Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cliente login successful\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has access token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('accessToken');",
									"    pm.globals.set('cliente_token', jsonData.accessToken);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"cliente@test.com\",\n  \"password\": \"cliente123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": ["{{base_url}}"],
							"path": ["auth", "login"]
						}
					}
				}
			],
			"description": "Authentication tests for all user roles"
		},
		{
			"name": "üë• 2.5. Set User IDs for Existing Users",
			"item": [
				{
					"name": "Set Known User IDs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"User IDs set successfully\", function () {",
									"    // Set the known user IDs from the database initialization",
									"    pm.globals.set('admin_user_id', 'admin_user_id');",
									"    pm.globals.set('recepcionista_user_id', 'recepcionista_user_id');",
									"    pm.globals.set('coach_user_id', 'coach_user_id');",
									"    pm.globals.set('cliente_user_id', 'cliente_user_id');",
									"    ",
									"    console.log('‚úÖ User IDs configured:', {",
									"        admin: pm.globals.get('admin_user_id'),",
									"        recepcionista: pm.globals.get('recepcionista_user_id'),",
									"        coach: pm.globals.get('coach_user_id'),",
									"        cliente: pm.globals.get('cliente_user_id')",
									"    });",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						},
						"description": "This request sets the user IDs that were created by the database initialization script. These IDs are now available for use in subsequent tests."
					}
				},
				{
					"name": "Admin - Create New Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"New test user created successfully\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.globals.set('new_test_user_id', jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newuser@test.com\",\n  \"password\": \"newuser123\",\n  \"full_name\": \"New Test User\",\n  \"age\": 25,\n  \"phone\": \"+1234567899\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				}
			],
			"description": "Create users with specific roles using admin privileges"
		},
		{
			"name": "üëë 3. Admin Role Tests (Full Access)",
			"item": [
				{
					"name": "Admin - GET /users (‚úÖ Should succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can get all users\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Admin - GET /users/:id (‚úÖ Should succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can get user by ID\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{cliente_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{cliente_user_id}}"]
						}
					}
				},
				{
					"name": "Admin - POST /users (‚úÖ Should succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can create user\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.globals.set('new_test_user_id', jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"newuser@test.com\",\n  \"password\": \"newuser123\",\n  \"full_name\": \"New User\",\n  \"age\": 25,\n  \"phone\": \"+1234567894\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Admin - PUT /users/:id (‚úÖ Should succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can update user\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData.full_name).to.eql('Updated User Name');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Updated User Name\",\n  \"age\": 26\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{new_test_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{new_test_user_id}}"]
						}
					}
				},
				{
					"name": "Admin - DELETE /users/:id (‚úÖ Should succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Admin can delete user\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{new_test_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{new_test_user_id}}"]
						}
					}
				}
			],
			"description": "Tests for admin role - should have full access to all user operations"
		},
		{
			"name": "üè¢ 4. Recepcionista Role Tests (View/Create Only)",
			"item": [
				{
					"name": "Recepcionista - GET /users (‚úÖ Should succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Recepcionista can get all users\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{recepcionista_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Recepcionista - GET /users/:id (‚úÖ Should succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Recepcionista can get user by ID\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{recepcionista_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{cliente_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{cliente_user_id}}"]
						}
					}
				},
				{
					"name": "Recepcionista - POST /users (‚úÖ Should succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Recepcionista can create user\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.globals.set('recep_created_user_id', jsonData.id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{recepcionista_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"recepuser@test.com\",\n  \"password\": \"recepuser123\",\n  \"full_name\": \"Recep Created User\",\n  \"age\": 22,\n  \"phone\": \"+1234567895\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Recepcionista - PUT /users/:id (‚ùå Should fail - 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Recepcionista cannot update users\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has forbidden message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{recepcionista_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Should not update\",\n  \"age\": 99\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{cliente_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{cliente_user_id}}"]
						}
					}
				},
				{
					"name": "Recepcionista - DELETE /users/:id (‚ùå Should fail - 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Recepcionista cannot delete users\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has forbidden message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{recepcionista_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{cliente_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{cliente_user_id}}"]
						}
					}
				}
			],
			"description": "Tests for recepcionista role - can view and create users but cannot modify or delete"
		},
		{
			"name": "üèÉ 5. Coach Role Tests (View Users + Own Profile)",
			"item": [
				{
					"name": "Coach - GET /users (‚ùå Should fail - 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Coach cannot get all users\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has forbidden message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{coach_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Coach - GET /users/:id (‚úÖ Should succeed)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Coach can get user by ID\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{coach_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{cliente_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{cliente_user_id}}"]
						}
					}
				},
				{
					"name": "Coach - POST /users (‚ùå Should fail - 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Coach cannot create users\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has forbidden message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{coach_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"coachuser@test.com\",\n  \"password\": \"coachuser123\",\n  \"full_name\": \"Coach Created User\",\n  \"age\": 22,\n  \"phone\": \"+1234567896\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Coach - PUT /users/:id (‚ùå Should fail - 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Coach cannot update users\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has forbidden message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{coach_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Should not update\",\n  \"age\": 99\n}"
						},
						"url": {
							"raw": "{{base_url}}/users/{{cliente_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{cliente_user_id}}"]
						}
					}
				},
				{
					"name": "Coach - GET /auth/profile (‚úÖ Should succeed - Own profile)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Coach can get own profile\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email).to.eql('coach@test.com');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{coach_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/profile",
							"host": ["{{base_url}}"],
							"path": ["auth", "profile"]
						}
					}
				}
			],
			"description": "Tests for coach role - can view individual users and own profile but cannot create, update, or delete users"
		},
		{
			"name": "üë§ 6. Cliente Role Tests (Own Profile Only)",
			"item": [
				{
					"name": "Cliente - GET /users (‚ùå Should fail - 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cliente cannot get all users\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has forbidden message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cliente_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Cliente - GET /users/:id (‚ùå Should fail - 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cliente cannot get other users by ID\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has forbidden message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cliente_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{admin_user_id}}",
							"host": ["{{base_url}}"],
							"path": ["users", "{{admin_user_id}}"]
						}
					}
				},
				{
					"name": "Cliente - POST /users (‚ùå Should fail - 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cliente cannot create users\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has forbidden message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Forbidden');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cliente_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"clienteuser@test.com\",\n  \"password\": \"clienteuser123\",\n  \"full_name\": \"Cliente Created User\",\n  \"age\": 22,\n  \"phone\": \"+1234567897\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Cliente - GET /auth/profile (‚úÖ Should succeed - Own profile)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cliente can get own profile\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData.email).to.eql('cliente@test.com');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{cliente_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/profile",
							"host": ["{{base_url}}"],
							"path": ["auth", "profile"]
						}
					}
				},
				{
					"name": "Cliente - PUT /auth/profile (‚úÖ Should succeed - Own profile)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Cliente can update own profile\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has updated user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('full_name');",
									"    pm.expect(jsonData.full_name).to.eql('Cliente Updated Name');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{cliente_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"full_name\": \"Cliente Updated Name\",\n  \"age\": 36\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/profile",
							"host": ["{{base_url}}"],
							"path": ["auth", "profile"]
						}
					}
				}
			],
			"description": "Tests for cliente role - can only access and modify own profile"
		},
		{
			"name": "üîí 7. Authentication Edge Cases",
			"item": [
				{
					"name": "No Token - GET /users (‚ùå Should fail - 401)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"No token returns 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Response has unauthorized message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Unauthorized');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				},
				{
					"name": "Invalid Token - GET /users (‚ùå Should fail - 403)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid token returns 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Response has invalid token message\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.include('Invalid');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_12345"
							}
						],
						"url": {
							"raw": "{{base_url}}/users",
							"host": ["{{base_url}}"],
							"path": ["users"]
						}
					}
				}
			],
			"description": "Tests for authentication edge cases"
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		}
	]
}